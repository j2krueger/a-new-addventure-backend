openapi: 3.1.0
info:
  title: A New Addventure
  description:
    "A collaborative fiction site that allows users to write stories with\
    \ multiple branches, and add branches to existing stories written by others."
  version: 1.0.0
servers:
  - url: /
paths:
  /register:
    summary: GET/POST registration
    post:
      tags:
        - User
      summary: Register a new user
      description:
        "Register a new user by posting a new userName, an email address,\
        \ and a password. Check for unique userName, send verification email, and\
        \ store password."
      operationId: register_user
      requestBody:
        description: Submit a request to register a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
            example:
              {
                "userName": "Freddy",
                "email": "Freddy@example.com",
                "password": "s33krit!",
              }
      responses:
        "201":
          description: "If the registration is successful, return the users private profile information to indicate success."
          content:
            application/json:
              examples:
                registered:
                  value:
                    {
                      "userId": "66845f61c806ebe5276df8db",
                      "userName": "Freddy",
                      "email": "Freddy@example.com",
                      "bio": "I haven't decided what to put in my bio yet.",
                      "publishEmail": false,
                    }
        "400":
          description: "If any of the fields are missing, return an error."
          content:
            application/json:
              examples:
                duplicateUsername:
                  value: { "error": "Missing userName, email, or password." }
        "409":
          description: "Username or Email are already in use."
          content:
            application/json:
              examples:
                registered:
                  value: { "error": "Username or email are already in use." }
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /login:
    summary: GET/POST login
    post:
      tags:
        - User
      summary: Login user
      description:
        "Post the name and password entered by the user, name may be either a userName or an email,\
        \ userName checked first. If the name matches a user and the password is correct for that user,\
        \ log them in."
      operationId: login_user
      requestBody:
        description: Submit a request to login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
            example: { "name": "Freddy", "password": "s33krit!" }
      responses:
        "200":
          description: "If the login is successful, return the users private profile information to indicate success."
          content:
            application/json:
              examples:
                registered:
                  value:
                    {
                      "userId": "667afb5feb94737bf4556b7e",
                      "userName": "Hank R. Chief",
                      "email": "Hank@example.com",
                      "bio": "I haven't decided what to put in my bio yet.",
                      "publishEmail": false,
                    }
        "400":
          description: "Missing field."
          content:
            application/json:
              examples:
                registered:
                  value: { "error": "Missing name or password." }
        "401":
          description: "Login failed."
          content:
            application/json:
              examples:
                registered:
                  value: { "error": "Incorrect name or password." }
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /logout:
    summary: POST logout
    post:
      tags:
        - User
      summary: Logout the logged in user.
      description:
        "Logout the logged in user. Posted by a button on the users profile\
        \ page, or from the user menu."
      operationId: logout_user
      responses:
        "200":
          description:
            "Logout should always be successful. If user was logged in\
            \ before request, the cookie will indicate the user to log out. If user\
            \ was not logged in before request, user will still not be logged in,\
            \ so we'll call that a success condition too."
          content:
            application/json:
              examples:
                registered:
                  value: { "message": "Logout successful." }
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /profile:
    summary: GET/PUT logged in user's profile
    get:
      tags:
        - User
      summary: Get user's profile.
      description:
        "If a user is logged in, get that user's settings from the server,\
        \ and show them on the page. If no user is logged in, check localStorage for\
        \ basic settings (light/dark mode, blocked tags) otherwise use default basic\
        \ settings. Can be used to change settings."
      operationId: get_profile_page
      responses:
        "200":
          description: "Returns the private profile information of the logged in user."
          content:
            application/json:
              examples:
                registered:
                  value:
                    {
                      "userId": "668490250029a28118a8d1be",
                      "userName": "Freddy",
                      "email": "Freddy@example.com",
                      "bio": "I HAVE decided what to put in my bio yet.",
                      "publishEmail": true,
                      "darkMode": false,
                      "publishedEntries":
                        [
                          {
                            "entryId": "6685cf32fb208efa4de7dfab",
                            "storyTitle": "Story Title",
                            "entryTitle": null,
                          },
                          {
                            "entryId": "6685d031715453a8be27589b",
                            "storyTitle": "Super Good Title",
                            "entryTitle": null,
                          },
                          {
                            "entryId": "6688142fb004b799a5a29d03",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the zeroeth",
                          },
                          {
                            "entryId": "668820191cb99dfdc244c23c",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the first",
                          },
                          {
                            "entryId": "668857a03f120ae7785257d4",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the zeroeth",
                          },
                        ],
                    }
        "401":
          description: "If no user is logged in, return an error"
          content:
            application/json:
              examples:
                registered:
                  value: { "error": "No user logged in." }
        default:
          description: Default error sample response
      x-swagger-router-controller: User
    put:
      tags:
        - User
      summary: Post changes to user's profile.
      description: "If a user is logged in, put the changed settings to the server."
      operationId: put_profile
      requestBody:
        description: "Submit a request to change some settings."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
            example: { "publishEmail": true, "bio": "This is a new bio." }
      responses:
        "200":
          description: "Return the user's private profile data"
          content:
            application/json:
              examples:
                registered:
                  value:
                    {
                      "userId": "668490250029a28118a8d1be",
                      "userName": "Freddy",
                      "email": "Freddy@example.com",
                      "bio": "I HAVE decided what to put in my bio yet.",
                      "publishEmail": true,
                      "darkMode": false,
                      "publishedEntries":
                        [
                          {
                            "entryId": "6685cf32fb208efa4de7dfab",
                            "storyTitle": "Story Title",
                            "entryTitle": null,
                          },
                          {
                            "entryId": "6685d031715453a8be27589b",
                            "storyTitle": "Super Good Title",
                            "entryTitle": null,
                          },
                          {
                            "entryId": "6688142fb004b799a5a29d03",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the zeroeth",
                          },
                          {
                            "entryId": "668820191cb99dfdc244c23c",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the first",
                          },
                          {
                            "entryId": "668857a03f120ae7785257d4",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the zeroeth",
                          },
                        ],
                    }
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /user:
    summary: GET a list of users
    get:
      tags:
        - User
        - Search
      summary: "Get a list of users, sorted alphabetically."
      description:
        "Get a list of users, in publicInfo format, sorted alphabetically. If there's a query string, only return the users whose userNames\
        \ match that query string."
      operationId: get_users
      parameters:
        - in: query
          name: regex
          schema:
            type: string
          description: "If present, only returns users whose userName matches the regex, case sensitive unless i is set to a non-empty value."
        - in: query
          name: i
          schema:
            type: string
          description: "If set to a non-empty value, regex match is done case insensitively. Ignored if regex is not set."
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: "Returns the indicated page number of the result list. If not set, is equivalent to setting page=1"
      responses:
        "200":
          description: "List of users found."
          content:
            application/json:
              examples:
                registered:
                  value:
                    [
                      {
                        "userId": "668ee1dae1dcd980cf0739e0",
                        "userName": "FreddySaturn",
                        "email": "",
                        "bio": "I haven't decided what to put in my bio yet.",
                        "publishedEntries": [],
                      },
                      {
                        "userId": "668ee27de1dcd980cf073a08",
                        "userName": "FreddySedna",
                        "email": "",
                        "bio": "I haven't decided what to put in my bio yet.",
                        "publishedEntries": [],
                      },
                      {
                        "userId": "668ee31ae1dcd980cf073a17",
                        "userName": "FreddyTitan",
                        "email": "",
                        "bio": "I haven't decided what to put in my bio yet.",
                        "publishedEntries": [],
                      },
                    ]
        "404":
          description: "No users matching the search string found."
          content:
            application/json:
              examples:
                registered:
                  value: []
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /user/{userId}:
    summary: GET a user's public profile
    get:
      tags:
        - User
      summary: Get a user's public profile.
      description:
        "Get a webpage showing the specified user's public profile, including\
        \ userName, bio, email if user has decided to make that public, links to entries\
        \ and comments, possibly other stuff we think of later."
      operationId: get_public_profile
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Successfully retrieved user profile."
          content:
            application/json:
              examples:
                registered:
                  value:
                    {
                      "userId": "668490250029a28118a8d1be",
                      "userName": "Freddy",
                      "email": "Freddy@example.com",
                      "bio": "I HAVE decided what to put in my bio yet.",
                      "publishedEntries":
                        [
                          {
                            "entryId": "6685cf32fb208efa4de7dfab",
                            "storyTitle": "Story Title",
                            "entryTitle": null,
                          },
                          {
                            "entryId": "6685d031715453a8be27589b",
                            "storyTitle": "Super Good Title",
                            "entryTitle": null,
                          },
                          {
                            "entryId": "6688142fb004b799a5a29d03",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the zeroeth",
                          },
                          {
                            "entryId": "668820191cb99dfdc244c23c",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the first",
                          },
                          {
                            "entryId": "668857a03f120ae7785257d4",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the zeroeth",
                          },
                        ],
                    }
        "404":
          description: "User not found."
          content:
            application/json:
              examples:
                registered:
                  value: { "error": "There is no user with that user ID." }
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /entry:
    summary: GET/POST entries
    get:
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: "The page number of results the user is requesting. Absence is equivalent to 'page=1'"
        - in: query
          name: regex
          schema:
            type: string
          description: "A regular expression, only entries that match regexp in one of the fields specified in 'fields' will be returned"
        - in: query
          name: fields
          schema:
            type: string
          description:
            "a string containing letters specifying fields in which to look for matches of 'regexp' with the following\
            \ correspondence: 's': 'storyTitle, 'e': 'entryTitle', 'a': 'authorName', 'b': 'bodyText'. If 'fields' is not specified,\
            \ it defaults to 'seab'"
      tags:
        - Entry
      summary: GET a list of recent entries
      description: "Gets a list of [constants.entriesPerPage] recent entries, newest first. Get more by setting query string to 'page=2', etc."
      operationId: get_entry_list
      responses:
        "200":
          description: "Successfully found entries."
          content:
            application/json:
              examples:
                registered:
                  value:
                    [
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668d51e61be56166aaaa6cc2",
                        "storyTitle": "Random Title",
                        "entryTitle": "Suddenly, a wild accountant appears!",
                        "authorName": "Freddy",
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668c47c3e0989ccd9cd6eca8",
                        "storyTitle": "Random Title",
                        "entryTitle": "adding another to list of entries",
                        "authorName": "apmanager",
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668c4771e0989ccd9cd6ec8a",
                        "storyTitle": "Random Title",
                        "entryTitle": "adding to this entries list of sub entries",
                        "authorName": "apmanager",
                      },
                      {
                        "storyId": "66885d8e6715f290d4ce03a9",
                        "entryId": "668892f10371e6c253583148",
                        "storyTitle": "Random Title",
                        "entryTitle": "dddddddddddd",
                        "authorName": "apmanager",
                      },
                      {
                        "storyId": "668857a03f120ae7785257d4",
                        "entryId": "668857a03f120ae7785257d4",
                        "storyTitle": "Random Title",
                        "entryTitle": null,
                        "authorName": "Freddy",
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668820191cb99dfdc244c23c",
                        "storyTitle": "Random Title",
                        "entryTitle": "Chapter the first",
                        "authorName": "Freddy",
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "6688142fb004b799a5a29d03",
                        "storyTitle": "Random Title",
                        "entryTitle": null,
                        "authorName": "Freddy",
                      },
                    ]
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    post:
      tags:
        - Entry
        - Story
      summary: Post a new story
      description: "Post the story title, entry title, and text of an entry to start a new story."
      operationId: post_story
      requestBody:
        description: "Post a new story."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewStory"
            example:
              {
                "storyTitle": "Random Title",
                "bodyText": "Genji no monogatari",
              }
      responses:
        "201":
          description: "Successfully created entry."
          content:
            application/json:
              examples:
                registered:
                  value:
                    {
                      "authorName": "Freddy",
                      "entryTitle": "Chapter the zeroeth",
                      "storyTitle": "Random Title",
                      "bodyText": "Genji no monogatari",
                      "previousEntry": null,
                      "flagId": null,
                      "likes": 0,
                      "_id": "6688142fb004b799a5a29d03",
                      "createDate": "2024-07-05T15:41:35.510Z",
                      "storyId": "6688142fb004b799a5a29d03",
                      "__v": 0,
                    }
        "400":
          description: "Bad request."
          content:
            application/json:
              examples:
                registered:
                  value: { "error": "Missing story title." }
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryId}:
    summary: GET/POST/PUT/DELETE a particular entry
    get:
      tags:
        - Entry
      summary: GET a particular entry by ID
      description: "Gets entry data, and an array named continuationEntries containing entryIds and entry titles from continuation entries."
      operationId: get_entry_by_id
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Entry found"
          content:
            application/json:
              examples:
                registered:
                  value:
                    {
                      "entryId": "6688142fb004b799a5a29d03",
                      "authorName": "Freddy",
                      "entryTitle": "Chapter the zeroeth",
                      "storyTitle": "Random Title",
                      "bodyText": "Genji no monogatari",
                      "previousEntry": null,
                      "flagId": null,
                      "likes": 0,
                      "createDate": "2024-07-05T15:41:35.510Z",
                      "storyId": "6688142fb004b799a5a29d03",
                      "continuationEntries":
                        [
                          {
                            "entryId": "668820191cb99dfdc244c23c",
                            "storyTitle": "Random Title",
                            "entryTitle": "Chapter the first",
                          },
                        ],
                    }
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    put:
      tags:
        - Entry
      summary: Edit an entry
      description: "Edit an entry's entry title, keywords, and entry text. Can only be done by admins, mods, and the user who created the entry."
      operationId: edit_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    post:
      tags:
        - Entry
      summary: "Post a continuation of entry {entryId}"
      description: "Post a new entry continuing entry {entryId} including entry title, and entry text."
      operationId: post_entry
      parameters:
        - name: entryId
          in: path
          description: The ID of the entry being continued.
          required: true
          style: simple
          explode: false
          schema: {}
      requestBody:
        description: "Post a new entry continuing entry {entryId} including entry title, and entry text."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContinueStory"
            example:
              { "entryTitle": "Chapter the first", "bodyText": "Mononoke Hime" }
      responses:
        "201":
          description: "Successfully created entry"
          content:
            application/json:
              examples:
                registered:
                  value:
                    {
                      "authorName": "Freddy",
                      "entryTitle": "Chapter the first",
                      "bodyText": "Mononoke Hime",
                      "previousEntry": "6688142fb004b799a5a29d03",
                      "flagId": null,
                      "likes": 0,
                      "_id": "668820191cb99dfdc244c23c",
                      "createDate": "2024-07-05T16:32:25.490Z",
                      "storyId": "6688142fb004b799a5a29d03",
                      "storyTitle": "Random Title",
                      "__v": 0,
                    }
        "400":
          description: "Bad request."
          content:
            application/json:
              examples:
                registered:
                  value: { "error": "Missing entry title." }
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    delete:
      tags:
        - Entry
      summary: Delete an entry
      description:
        "Delete an entry entirely if there are no continuations, otherwise\
        \ deletes entry title, deletable keywords, and entry text. Can\
        \ only be done by admins, mods, and the creating user."
      operationId: delete_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryId}/flag:
    summary: POST a flag for review on the entry
    post:
      tags:
        - Entry
      summary: Flag an entry for review
      description:
        "Post a flag for review, to be entered into a moderation queue.\
        \ Must include reason for flagging."
      operationId: flag_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryId}/keyword/{keyword}:
    summary: GET/POST/DELETE keywords
    get:
      tags:
        - Entry
        - Keyword
      summary: Get list of keywords on entry.
      description:
        "Gets a list of the keywords applied to the entry. Special keywords\
        \ first, then non-special inherited keywords, then non-special non-inherited\
        \ keywords."
      operationId: get_keywords
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
        - name: keyword
          in: path
          description: a keyword
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    post:
      tags:
        - Entry
        - Keyword
      summary: Post new keywords to an entry
      description:
        "Posts one or more keywords to be applied to an existing entry.\
        \ Admins, mods, and creating author get their new keywords automatically applied,\
        \ anyone else gets their keywords submitted to a mod queue."
      operationId: post_new_keywords
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
        - name: keyword
          in: path
          description: a keyword
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    delete:
      tags:
        - Entry
        - Keyword
      summary: Delete keywords from an entry.
      description:
        "If given keywords are not inherited, admins, mods, and the entry\
        \ creator get the keyword deleted immediately, anyone else gets keyword deletion\
        \ request submitted to mod queue."
      operationId: delete_keywords
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
        - name: keyword
          in: path
          description: a keyword
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryId}/comment:
    summary: GET/POST comments on entry
    get:
      tags:
        - Entry
        - Comment
      summary: Get comments posted to an entry
      description:
        Get a list of the comments that have been posted to an entry. Each
        comment entry will have the userName of the user who posted it attatched.
      operationId: get_comments
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    post:
      tags:
        - Entry
        - Comment
      summary: Post a new comment.
      description: Post a new comment to an entry. Any logged in user.
      operationId: post_comment
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryId}/comment/{commentId}:
    summary: PUT/DELETE a comment
    put:
      tags:
        - Entry
        - Comment
      summary: Edit a comment.
      description: Edit a comment. Admin/mod/comment creator only.
      operationId: edit_comment
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
        - name: commentId
          in: path
          description: the ID of the comment
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    delete:
      tags:
        - Entry
        - Comment
      summary: Delete a comment.
      description: Delete a comment. Admin/mod/comment creator only.
      operationId: delete_comment
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
        - name: commentId
          in: path
          description: the ID of the comment
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryId}/comment/{commentId}/flag:
    summary: POST a flag for review on a comment
    post:
      tags:
        - Entry
        - Comment
        - Flag
      summary: Post a flag for review on a comment
      description: "Post a flag for review on a comment, inserted into mod queue"
      operationId: flag_comment
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
        - name: commentId
          in: path
          description: the ID of the comment
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /chain/{entryId}:
    summary: GET the entry chain ending at the specified entry
    get:
      tags:
        - Chain
      summary: Get the entry chain ending at the specified entry.
      description:
        "Get the entry chain starting with the first entry of the story\
        \ and ending at the specified entry. Show the Story title, then for each entry\
        \ show the entry title, the author, the keywords, the story text, and the\
        \ entry title for the next entry in the chain if applicable."
      operationId: get_chain
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Chain
  /keywords:
    summary: GET a list of defined keywords
    get:
      tags:
        - Keyword
        - Search
      summary: Get a list of defined keywords
      description:
        "Get a list of all used keywords, sorted alphabetically or by use\
        \ count. If a query string is used, return only matching keywords."
      operationId: get_keyword_list
      responses:
        "200":
          description: "Successfully found a list of keywords."
          content:
            application/json:
              examples:
                registered:
                  value:
                    { "keywords": ["NSFW", "GORE", "SEX", "FF:Sailor Moon"] }
        "404":
          description: "No matching keywords found."
          content:
            application/json:
              examples:
                registered:
                  value: { "keywords": [] }
        default:
          description: Default error sample response
      x-swagger-router-controller: Keyword
components:
  schemas:
    Register:
      required:
        - userName
        - email
        - password
      properties:
        userName:
          type: string
        email:
          type: string
        password:
          type: string
    Login:
      required:
        - name
        - password
      properties:
        name:
          type: string
        password:
          type: string
    Settings:
      properties:
        bio:
          type: string
        publishEmail:
          type: boolean
        darkMode:
          type: boolean
    NewStory:
      required:
        - storyTitle
        - bodyText
      properties:
        storyTitle:
          type: string
        bodyText:
          type: string
    ContinueStory:
      required:
        - entryTitle
        - bodyText
      properties:
        entryTitle:
          type: string
        bodyText:
          type: string
