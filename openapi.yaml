openapi: 3.1.0
info:
  title: A New Addventure
  description:
    "A collaborative fiction site that allows users to write stories with\
    \ multiple branches, and add branches to existing stories written by others."
  version: 1.0.0
servers:
  - url: /
paths:
  /register:
    summary: GET/POST registration
    post:
      tags:
        - User
      summary: Register a new user
      description:
        "Register a new user by posting a new userName, an email address,\
        \ and a password. Check for unique userName, send verification email, and\
        \ store password."
      operationId: register_user
      requestBody:
        description: Submit a request to register a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
            example:
              {
                "userName": "EasterBunny",
                "email": "EasterBunny@example.com",
                "password": "12345678",
              }
      responses:
        "201":
          description: "If the registration is successful, return the users private profile information to indicate success."
          content:
            application/json:
              example:
                {
                  "userId": "66ce0c8dc538303360039d01",
                  "userName": "EasterBunny",
                  "email": "EasterBunny@example.com",
                  "admin": false,
                  "moderator": false,
                  "bio": "I haven't decided what to put in my bio yet.",
                  "publishEmail": false,
                  "darkMode": false,
                  "locked": false,
                  "publishedEntries": [],
                  "followedAuthors": [],
                  "likedEntries": [],
                  "bookmarkedEntries": [],
                }
        "400":
          description: "If any of the fields are missing, return an error."
          content:
            application/json:
              examples:
                missingPassword:
                  value: { "error": "Missing password." }
                missingUserName:
                  value: { "error": "Missing userName." }
                missingEmail:
                  value: { "error": "Missing email." }
        "409":
          description: "Username or Email are already in use."
          content:
            application/json:
              examples:
                duplicateUserName:
                  value: { "error": "Username already in use." }
                duplicateEmail:
                  value: { "error": "Email already in use." }
        default:
          description: Default error sample response
  /login:
    summary: POST login
    post:
      tags:
        - User
      summary: Login user
      description:
        "Post the name and password entered by the user, name may be either a userName or an email,\
        \ userName checked first. If the name matches a user and the password is correct for that user,\
        \ log them in."
      operationId: login_user
      requestBody:
        description: Submit a request to login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
            example: { "name": "EasterBunny", "password": "12345678" }
      responses:
        "200":
          description: "If the login is successful, return the users private profile information to indicate success."
          content:
            application/json:
              example:
                {
                  "userId": "66ce0c8dc538303360039d01",
                  "userName": "EasterBunny",
                  "email": "EasterBunny@example.com",
                  "admin": false,
                  "moderator": false,
                  "bio": "I haven't decided what to put in my bio yet.",
                  "publishEmail": false,
                  "darkMode": false,
                  "locked": false,
                  "publishedEntries": [],
                  "followedAuthors": [],
                  "likedEntries": [],
                  "bookmarkedEntries": [],
                }
        "400":
          description: "Missing field."
          content:
            application/json:
              examples:
                missingName:
                  value: { "error": "Missing name." }
                missingPassword:
                  value: { "error": "Missing password." }
        "401":
          description: "Login failed."
          content:
            application/json:
              example: { "error": "Incorrect name or password." }
        default:
          description: Default error sample response
  /logout:
    summary: POST logout
    post:
      tags:
        - User
      summary: Logout the logged in user.
      description:
        "Logout the logged in user. Posted by a button on the users profile\
        \ page, or from the user menu."
      operationId: logout_user
      responses:
        "200":
          description:
            "Logout should always be successful. If user was logged in\
            \ before request, the cookie will indicate the user to log out. If user\
            \ was not logged in before request, user will still not be logged in,\
            \ so we'll call that a success condition too."
          content:
            application/json:
              example: { "message": "Logout successful." }
        default:
          description: Default error sample response
  /profile:
    summary: GET/PUT logged in user's profile
    get:
      tags:
        - User
      summary: Get user's profile.
      description:
        "If a user is logged in, get that user's settings from the server,\
        \ and show them on the page. If no user is logged in, check localStorage for\
        \ basic settings (light/dark mode, blocked tags) otherwise use default basic\
        \ settings. Can be used to change settings."
      operationId: get_profile_page
      responses:
        "200":
          description: "Returns the private profile information of the logged in user."
          content:
            application/json:
              example:
                {
                  "userId": "668490250029a28118a8d1be",
                  "userName": "Freddy",
                  "email": "Freddy@example.com",
                  "admin": true,
                  "moderator": false,
                  "bio": "I'm not particularly good at bio. I'm really more of a math/physics/computers kinda guy.",
                  "publishEmail": true,
                  "darkMode": true,
                  "locked": false,
                  "publishedEntries":
                    [
                      {
                        "storyId": "6695b2573550c66db1ab9106",
                        "entryId": "66a7fd2095206fecbb52c189",
                        "storyTitle": "In the beginning...",
                        "entryTitle": "Lerrald and Vred sought the Cartesian Bear",
                        "authorName": "Freddy",
                        "previousEntry": "6695b2573550c66db1ab9106",
                        "keywords": [],
                      },
                      {
                        "storyId": "6695b2573550c66db1ab9106",
                        "entryId": "6695b2573550c66db1ab9106",
                        "storyTitle": "In the beginning...",
                        "entryTitle": null,
                        "authorName": "Freddy",
                        "previousEntry": null,
                        "keywords": [],
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668d51e61be56166aaaa6cc2",
                        "storyTitle": "Random Title",
                        "entryTitle": "Suddenly, a wild accountant appears!",
                        "authorName": "Freddy",
                        "previousEntry": "6688142fb004b799a5a29d03",
                        "keywords": [],
                      },
                    ],
                  "followedAuthors":
                    [
                      {
                        "userName": "apmanager",
                        "userId": "667b294248b8805d71a96a03",
                      },
                      {
                        "userName": "BlackLagoon",
                        "userId": "668ee18ae1dcd980cf0739c2",
                      },
                      {
                        "userName": "FreddyJupiter",
                        "userId": "668ee1cfe1dcd980cf0739db",
                      },
                      {
                        "userName": "FreddyMercury",
                        "userId": "668ee198e1dcd980cf0739c7",
                      },
                      {
                        "userName": "FreddyQuaoar",
                        "userId": "668ee23ce1dcd980cf0739f9",
                      },
                    ],
                  "likedEntries":
                    [
                      {
                        "storyId": "66a5a2ab375bbb2298ff7420",
                        "entryId": "66a5a2ab375bbb2298ff7420",
                        "storyTitle": "7th newest ",
                        "entryTitle": null,
                        "authorName": "apmanager",
                        "authorId": "667b294248b8805d71a96a03",
                        "previousEntry": null,
                        "keywords": [],
                      },
                    ],
                  "bookmarkedEntries":
                    [
                      {
                        "storyId": "6695b2573550c66db1ab9106",
                        "entryId": "66a7fd2095206fecbb52c189",
                        "storyTitle": "In the beginning...",
                        "entryTitle": "Lerrald and Vred sought the Cartesian Bear",
                        "authorName": "Freddy",
                        "authorId": "668490250029a28118a8d1be",
                        "previousEntry": "6695b2573550c66db1ab9106",
                        "keywords": [],
                      },
                      {
                        "storyId": "66a5a2ab375bbb2298ff7420",
                        "entryId": "66a5a2ab375bbb2298ff7420",
                        "storyTitle": "7th newest ",
                        "entryTitle": null,
                        "authorName": "apmanager",
                        "authorId": "667b294248b8805d71a96a03",
                        "previousEntry": null,
                        "keywords": [],
                      },
                    ],
                }
        "401":
          description: "If no user is logged in, return an error"
          content:
            application/json:
              example: { "error": "No user logged in." }
        default:
          description: Default error sample response
    put:
      tags:
        - User
      summary: Post changes to user's profile.
      description: "If a user is logged in, put the changed settings to the server."
      operationId: put_profile
      requestBody:
        description: "Submit a request to change some settings."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
            example:
              {
                "publishEmail": true,
                "bio": "This is a new bio.",
                "darkMode": false,
              }
      responses:
        "200":
          description: "Return the user's private profile data"
          content:
            application/json:
              example:
                {
                  "userId": "668490250029a28118a8d1be",
                  "userName": "Freddy",
                  "email": "Freddy@example.com",
                  "admin": true,
                  "moderator": false,
                  "bio": "I'm not particularly good at bio. I'm really more of a math/physics/computers kinda guy.",
                  "publishEmail": true,
                  "darkMode": true,
                  "locked": false,
                  "publishedEntries":
                    [
                      {
                        "storyId": "6695b2573550c66db1ab9106",
                        "entryId": "66a7fd2095206fecbb52c189",
                        "storyTitle": "In the beginning...",
                        "entryTitle": "Lerrald and Vred sought the Cartesian Bear",
                        "authorName": "Freddy",
                        "previousEntry": "6695b2573550c66db1ab9106",
                        "keywords": [],
                      },
                      {
                        "storyId": "6695b2573550c66db1ab9106",
                        "entryId": "6695b2573550c66db1ab9106",
                        "storyTitle": "In the beginning...",
                        "entryTitle": null,
                        "authorName": "Freddy",
                        "previousEntry": null,
                        "keywords": [],
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668d51e61be56166aaaa6cc2",
                        "storyTitle": "Random Title",
                        "entryTitle": "Suddenly, a wild accountant appears!",
                        "authorName": "Freddy",
                        "previousEntry": "6688142fb004b799a5a29d03",
                        "keywords": [],
                      },
                    ],
                  "followedAuthors":
                    [
                      {
                        "userName": "apmanager",
                        "userId": "667b294248b8805d71a96a03",
                      },
                      {
                        "userName": "BlackLagoon",
                        "userId": "668ee18ae1dcd980cf0739c2",
                      },
                      {
                        "userName": "FreddyJupiter",
                        "userId": "668ee1cfe1dcd980cf0739db",
                      },
                      {
                        "userName": "FreddyMercury",
                        "userId": "668ee198e1dcd980cf0739c7",
                      },
                      {
                        "userName": "FreddyQuaoar",
                        "userId": "668ee23ce1dcd980cf0739f9",
                      },
                    ],
                  "likedEntries":
                    [
                      {
                        "storyId": "66a5a2ab375bbb2298ff7420",
                        "entryId": "66a5a2ab375bbb2298ff7420",
                        "storyTitle": "7th newest ",
                        "entryTitle": null,
                        "authorName": "apmanager",
                        "authorId": "667b294248b8805d71a96a03",
                        "previousEntry": null,
                        "keywords": [],
                      },
                    ],
                  "bookmarkedEntries":
                    [
                      {
                        "storyId": "6695b2573550c66db1ab9106",
                        "entryId": "66a7fd2095206fecbb52c189",
                        "storyTitle": "In the beginning...",
                        "entryTitle": "Lerrald and Vred sought the Cartesian Bear",
                        "authorName": "Freddy",
                        "authorId": "668490250029a28118a8d1be",
                        "previousEntry": "6695b2573550c66db1ab9106",
                        "keywords": [],
                      },
                      {
                        "storyId": "66a5a2ab375bbb2298ff7420",
                        "entryId": "66a5a2ab375bbb2298ff7420",
                        "storyTitle": "7th newest ",
                        "entryTitle": null,
                        "authorName": "apmanager",
                        "authorId": "667b294248b8805d71a96a03",
                        "previousEntry": null,
                        "keywords": [],
                      },
                    ],
                }
        "400":
          description: Bad request
          content:
            application/json:
              example: { error: "Invalid request." }
        default:
          description: Default error sample response
  /user:
    summary: GET a list of users
    get:
      tags:
        - User
        - Search
      summary: "Get a list of users, sorted alphabetically."
      description:
        "Get a list of users, in publicInfo format, sorted alphabetically. If there's a query string, only return the users whose userNames\
        \ match that query string."
      operationId: get_users
      parameters:
        - in: query
          name: regex
          schema:
            type: string
          description: "If present, only returns users whose userName matches the regex, case sensitive unless i is set to a non-empty value."
        - in: query
          name: i
          schema:
            type: string
          description: "If set to a non-empty value, regex match is done case insensitively. Ignored if regex is not set."
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: "Returns the indicated page number of the result list. If not set, is equivalent to setting page=1"
      responses:
        "200":
          description: "List of users found."
          content:
            application/json:
              example:
                [
                  {
                    "userId": "668490250029a28118a8d1be",
                    "userName": "Freddy",
                    "email": "Freddy@example.com",
                    "bio": "I'm not particularly good at bio. I'm really more of a math/physics/computers kinda guy.",
                    "publishedEntries":
                      [
                        {
                          "storyId": "6695b2573550c66db1ab9106",
                          "entryId": "66a7fd2095206fecbb52c189",
                          "storyTitle": "In the beginning...",
                          "entryTitle": "Lerrald and Vred sought the Cartesian Bear",
                          "authorName": "Freddy",
                          "previousEntry": "6695b2573550c66db1ab9106",
                          "keywords": [],
                        },
                        {
                          "storyId": "6695b2573550c66db1ab9106",
                          "entryId": "6695b2573550c66db1ab9106",
                          "storyTitle": "In the beginning...",
                          "entryTitle": null,
                          "authorName": "Freddy",
                          "previousEntry": null,
                          "keywords": [],
                        },
                        {
                          "storyId": "6688142fb004b799a5a29d03",
                          "entryId": "668d51e61be56166aaaa6cc2",
                          "storyTitle": "Random Title",
                          "entryTitle": "Suddenly, a wild accountant appears!",
                          "authorName": "Freddy",
                          "previousEntry": "6688142fb004b799a5a29d03",
                          "keywords": [],
                        },
                      ],
                  },
                  {
                    "userId": "668ee325e1dcd980cf073a1c",
                    "userName": "FreddyCallisto",
                    "email": "",
                    "bio": "I haven't decided what to put in my bio yet.",
                    "publishedEntries": [],
                  },
                  {
                    "userId": "668ee24be1dcd980cf0739fe",
                    "userName": "FreddyCeres",
                    "email": "",
                    "bio": "I haven't decided what to put in my bio yet.",
                    "publishedEntries": [],
                  },
                  {
                    "userId": "668ee1b6e1dcd980cf0739d1",
                    "userName": "FreddyEarth",
                    "email": "",
                    "bio": "I haven't decided what to put in my bio yet.",
                    "publishedEntries": [],
                  },
                ]
        "404":
          description: "No users matching the search string found."
          content:
            application/json:
              example: { "error": "No matching users found." }
        default:
          description: Default error sample response
  /user/{userId}:
    summary: GET a user's public profile
    get:
      tags:
        - User
      summary: Get a user's public profile.
      description:
        Get the user's public information by userId, including userName, bio, email if they have set publishEmail to true, and links to their
        published entries.
      operationId: get_public_profile
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Successfully retrieved user profile."
          content:
            application/json:
              example:
                {
                  "userId": "668490250029a28118a8d1be",
                  "userName": "Freddy",
                  "email": "Freddy@example.com",
                  "bio": "I'm not particularly good at bio. I'm really more of a math/physics/computers kinda guy.",
                  "publishedEntries":
                    [
                      {
                        "storyId": "6695b2573550c66db1ab9106",
                        "entryId": "66a7fd2095206fecbb52c189",
                        "storyTitle": "In the beginning...",
                        "entryTitle": "Lerrald and Vred sought the Cartesian Bear",
                        "authorName": "Freddy",
                        "previousEntry": "6695b2573550c66db1ab9106",
                        "keywords": [],
                      },
                      {
                        "storyId": "6695b2573550c66db1ab9106",
                        "entryId": "6695b2573550c66db1ab9106",
                        "storyTitle": "In the beginning...",
                        "entryTitle": null,
                        "authorName": "Freddy",
                        "previousEntry": null,
                        "keywords": [],
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668d51e61be56166aaaa6cc2",
                        "storyTitle": "Random Title",
                        "entryTitle": "Suddenly, a wild accountant appears!",
                        "authorName": "Freddy",
                        "previousEntry": "6688142fb004b799a5a29d03",
                        "keywords": [],
                      },
                      {
                        "storyId": "66885d8e6715f290d4ce03a9",
                        "entryId": "66885d8e6715f290d4ce03a9",
                        "storyTitle": "Random Title",
                        "entryTitle": null,
                        "authorName": "Freddy",
                        "previousEntry": null,
                        "keywords": [],
                      },
                      {
                        "storyId": "668857a03f120ae7785257d4",
                        "entryId": "668857a03f120ae7785257d4",
                        "storyTitle": "Random Title",
                        "entryTitle": null,
                        "authorName": "Freddy",
                        "previousEntry": null,
                        "keywords": [],
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668820191cb99dfdc244c23c",
                        "storyTitle": "Random Title",
                        "entryTitle": "Chapter the first",
                        "authorName": "Freddy",
                        "previousEntry": "6688142fb004b799a5a29d03",
                        "keywords": [],
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "6688142fb004b799a5a29d03",
                        "storyTitle": "Random Title",
                        "entryTitle": null,
                        "authorName": "Freddy",
                        "previousEntry": null,
                        "keywords": [],
                      },
                    ],
                }
        "404":
          description: "User not found."
          content:
            application/json:
              example: { "error": "There is no user with that user ID." }
        default:
          description: Default error sample response
  /user/{userId}/follow:
    summary: Allows a logged-in user to follow another author
    post:
      tags:
        - User
      summary: Follow another user
      description: "If a user is logged in, posting to this route causes the logged in user to follow the user whose ID is in the path parameter."
      operationId: follow_user
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Successfully followed another user."
          content:
            application/json:
              example: { "message": "Follow successful." }
        "400":
          description: "Not a valid userId format"
          content:
            application/json:
              example: { "error": "That is not a properly formatted userId." }
        "404":
          description: "User not found."
          content:
            application/json:
              example: { "error": "There is no user with that user ID." }
        "409":
          description: "You can only follow a given user once."
          content:
            application/json:
              examples:
                duplicate:
                  value: { "error": "You are already following that user." }
                circular:
                  value:
                    {
                      "error": "Following yourself means you're going around in circles.",
                    }
        default:
          description: Default error sample response
    delete:
      tags:
        - User
      summary: Unfollow another user
      description: "If a user is logged in, deleteing this route causes the logged in user to unfollow the user whose ID is in the path parameter."
      operationId: unfollow_user
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Successfully unfollowed another user."
          content:
            application/json:
              example: { "message": "Author successfully unfollowed." }
        "400":
          description: "Not a valid userId format"
          content:
            application/json:
              example: { "error": "That is not a properly formatted userId." }
        "404":
          description: "User not found or not followed."
          content:
            application/json:
              example: { "error": "No follow to remove." }
        default:
          description: Default error sample response
  /verify:
    summary: If a user with an unverified email address is logged in, send a verification to their email address.
    post:
      tags:
        - User
      summary: If a user with an unverified email address is logged in, send a verification to their email address.
      description:
        If a user with an unverified email address is logged in, send a verification to their email address,
        containing a link with the userId and an emailVerificationKey.
      operationId: send_verification_email
      responses:
        "200":
          description: "Verification email successfully sent"
          content:
            application/json:
              example: { "message": "Verification email sent." }
        default:
          description: Default error sample response
  /verify/{userId}/{emailVerificationKey}:
    summary: Verify an email address
    post:
      tags:
        - User
      summary: Verify an email address.
      description:
        When a user is registered, or a user with an unverified email posts to the /verify route, an email is sent to
        the user's email address containing a link to the front end that contains their userId and emailVerificationKey.
        That page on the front end posts to this route with the userId and emailVerificationKey, setting the user's
        emailVerified field to true.
      operationId: verify_email
      parameters:
        - name: userId
          in: path
          description: the ID of a user
          required: true
          style: simple
          explode: false
          schema: {}
        - name: emailVerificationKey
          in: path
          description: the email verification key
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "email successfully verified"
          content:
            application/json:
              example: { "message": "Email successfully verified." }
        "400":
          description: "Bad request"
          content:
            application/json:
              examples:
                badUserId:
                  value: { "error": "That is not a properly formatted userId." }
                badEmailVerificationKey:
                  value:
                    {
                      "error": "That is not a properly formatted email verification key.",
                    }
        "403":
          description: "Unauthorized"
          content:
            application/json:
              example: { "error": "Bad email verification key." }
        "404":
          description: "User not found"
          content:
            application/json:
              example: { "error": "There is no user with that userId." }
        "409":
          description: "Email is already verified."
          content:
            application/json:
              example: { "error": "Email already verified." }
        default:
          description: Default error sample response
  /entry:
    summary: GET/POST entries
    get:
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: "The page number of results the user is requesting. Absence is equivalent to 'page=1'"
        - in: query
          name: storiesOnly
          schema:
            type: boolean
          description: "If true, only returns stories, i.e. entries that have storyId equal to entryId and previousEntry equal to null"
        - in: query
          name: search
          schema:
            type: string
          description:
            A string submitted by the user that specifies what to search for, in which fields, and what order the results should
            be returned in. The string must consist of 0 or more white space separated tokens. The string may contain 0 or 1 tokens
            matching the regular expression "o:[sealcSEALC]+", which specifies the sort order of the results. The letters after the
            "o:" specify the fields to sort by, "s:storyTitle", "e:entryTitle", "a:author", "l:likes", "c:createDate" with the
            earlier letters having higher priority than the later letters, and captial letters indicating descending order rather
            than ascending. If no sort order specification is given, the sort order defaults to "o:C". All other tokens must match
            the regular expression "([seabkSEAK]+:)?[\\w.-]+". The optional prefix terminating with the colon specifies the fields
            ("s:storyTitle" "e:entryTitle" "a:authorName" "b:bodyText" "k:keywords", captials indicate the word given must match
            the whole field and be case insensitive) in which to search for the word that makes up the rest of the token. Tokens
            that don't include the optional prefix are treated as if they had the prefix "seabK:".
      tags:
        - Entry
      summary: GET a list of recent entries
      description: "Gets a list of [constants.entriesPerPage] recent entries, newest first. Get more by setting query string to 'page=2', etc."
      operationId: get_entry_list
      responses:
        "200":
          description: "Successfully found entries."
          content:
            application/json:
              example:
                [
                  {
                    "storyId": "6695b2573550c66db1ab9106",
                    "entryId": "66a7fd2095206fecbb52c189",
                    "storyTitle": "In the beginning...",
                    "entryTitle": "Lerrald and Vred sought the Cartesian Bear",
                    "authorName": "Freddy",
                    "authorId": "668490250029a28118a8d1be",
                    "previousEntry": "6695b2573550c66db1ab9106",
                    "keywords": [],
                    "likes": 0,
                    "likedByUser": false,
                    "bookmarkedByUser": true,
                  },
                  {
                    "storyId": "66c6570904c7e9974e060273",
                    "entryId": "66c6570904c7e9974e060273",
                    "storyTitle": "In the beginnning...",
                    "entryTitle": null,
                    "authorName": "Freddy",
                    "authorId": "668490250029a28118a8d1be",
                    "previousEntry": null,
                    "keywords": ["drama", "sad"],
                    "likes": 0,
                    "likedByUser": false,
                    "bookmarkedByUser": false,
                  },
                  {
                    "storyId": "66c6570904c7e9974e060273",
                    "entryId": "66c6578d04c7e9974e060287",
                    "storyTitle": "In the beginnning...",
                    "entryTitle": "In the beginnning...",
                    "authorName": "Freddy",
                    "authorId": "668490250029a28118a8d1be",
                    "previousEntry": "66c6570904c7e9974e060273",
                    "keywords": ["drama", "sad"],
                    "likes": 0,
                    "likedByUser": false,
                    "bookmarkedByUser": false,
                  },
                ]
        default:
          description: Default error sample response
    post:
      tags:
        - Entry
        - Story
      summary: Post a new story
      description: "Post the story title, entry title, and text of an entry to start a new story."
      operationId: post_story
      requestBody:
        description: "Post a new story."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewStory"
            example:
              {
                "storyTitle": "Random Title",
                "bodyText": "Genji no monogatari",
                "keywords": ["drama", "sad"],
              }
      responses:
        "201":
          description: "Successfully created entry."
          content:
            application/json:
              example:
                {
                  "storyId": "66c6570904c7e9974e060273",
                  "entryId": "66c6570904c7e9974e060273",
                  "storyTitle": "In the beginnning...",
                  "entryTitle": null,
                  "authorName": "Freddy",
                  "authorId": "668490250029a28118a8d1be",
                  "bodyText": "testkurmdlqazsvnepyhs",
                  "previousEntry": null,
                  "createDate": "2024-08-21T21:07:21.032Z",
                  "keywords": ["drama", "sad"],
                  "likes": 0,
                }
        "400":
          description: "Bad request."
          content:
            application/json:
              examples:
                missingStoryTitle:
                  value: { "error": "Missing story title." }
                missingBodyText:
                  value: { "error": "Missing story text." }
                badKeywords:
                  value: { "error": "keywords must be an array of strings." }
        default:
          description: Default error sample response
  /entry/{entryId}:
    summary: GET/POST/PUT/DELETE a particular entry
    get:
      tags:
        - Entry
      summary: GET a particular entry by ID
      description: "Gets entry data, and an array named continuationEntries containing entryIds and entry titles from continuation entries."
      operationId: get_entry_by_id
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Entry found"
          content:
            application/json:
              example:
                {
                  "storyId": "6688142fb004b799a5a29d03",
                  "entryId": "6688142fb004b799a5a29d03",
                  "authorName": "Freddy",
                  "authorId": "668490250029a28118a8d1be",
                  "entryTitle": null,
                  "storyTitle": "Random Title",
                  "bodyText": "Genji no monogatari",
                  "previousEntry": null,
                  "createDate": "2024-07-05T15:41:35.510Z",
                  "keywords": ["sad"],
                  "likes": 0,
                  "likedByUser": false,
                  "bookmarkedByUser": false,
                  "continuationEntries":
                    [
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668820191cb99dfdc244c23c",
                        "storyTitle": "Random Title",
                        "entryTitle": "Chapter the first",
                        "authorName": "Freddy",
                        "previousEntry": "6688142fb004b799a5a29d03",
                        "keywords": ["happy", "cat"],
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668c4771e0989ccd9cd6ec8a",
                        "storyTitle": "Random Title",
                        "entryTitle": "adding to this entries list of sub entries",
                        "authorName": "apmanager",
                        "previousEntry": "6688142fb004b799a5a29d03",
                        "keywords": [],
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668c47c3e0989ccd9cd6eca8",
                        "storyTitle": "Random Title",
                        "entryTitle": "adding another to list of entries",
                        "authorName": "apmanager",
                        "previousEntry": "6688142fb004b799a5a29d03",
                        "keywords": [],
                      },
                    ],
                }
        "400":
          description: "userId not well formed"
          content:
            application/json:
              example: { "error": "That is not a properly formatted userId." }
        "404":
          description: "userId not found"
          content:
            application/json:
              example: { "error": "There is no user with that userId." }
        default:
          description: Default error sample response
    post:
      tags:
        - Entry
        - Story
      summary: Post a new story
      description: "Post the entry title and text of an entry to continue a story."
      operationId: continue_story
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      requestBody:
        description: "Continue a story."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContinueStory"
            example:
              {
                "storyTitle": "Once upon a time...",
                "bodyText": "Once upon a time, there were there were 92 little pigs. The first little pig built his house out of hydrogen, which was really dificult.",
                "keywords": ["drama", "sad"],
              }
      responses:
        "201":
          description: "Successfully created entry."
          content:
            application/json:
              example:
                {
                  "storyId": "66ce142dc538303360039d3b",
                  "entryId": "66ce142dc538303360039d3b",
                  "storyTitle": "Once upon a time...",
                  "entryTitle": null,
                  "authorName": "Freddy",
                  "authorId": "668490250029a28118a8d1be",
                  "bodyText": "Once upon a time, there were there were 92 little pigs. The first little pig built his house out of hydrogen, which was really dificult.",
                  "previousEntry": null,
                  "createDate": "2024-08-27T18:00:13.862Z",
                  "keywords": ["drama", "sad"],
                  "likes": 0,
                }
        "400":
          description: "Bad request."
          content:
            application/json:
              examples:
                missingStoryTitle:
                  value: { "error": "Missing entry title." }
                missingBodyText:
                  value: { "error": "Missing story text." }
                badKeywords:
                  value: { "error": "keywords must be an array of strings." }
        default:
          description: Default error sample response
  /entry/{entryId}/like:
    summary: POST or DELETE a like to an entry
    post:
      tags:
        - Entry
      summary: Like an entry
      description: "Like an entry. You cannot like your own entries, or like an entry multiple times."
      operationId: like_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Like successfully posted.
          content:
            application/json:
              example: { "message": "Entry liked." }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted entryId." }
        "404":
          description: entryId not found."
          content:
            application/json:
              example: { "error": "There is no entry with that entryId." }
        "409":
          description: Conflict
          content:
            application/json:
              examples:
                duplicateLike:
                  value: { "error": "You have already liked that entry." }
                likeOwnEntry:
                  value: { "error": "You cannot like your own entries." }
        default:
          description: Default error sample response
    delete:
      tags:
        - Entry
      summary: Remove a like from an entry
      description: "Remove a like from an entry."
      operationId: unlike_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Like successfully removed.
          content:
            application/json:
              example: { "message": "Like successfully removed." }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted entryId." }
        "404":
          description: entryId not found."
          content:
            application/json:
              examples:
                notLiked:
                  value: { error: "You have not liked that entry." }
                entryIdNotFound:
                  value: { "error": "There is no entry with that entryId." }
        default:
          description: Default error sample response
  /entry/{entryId}/flag:
    summary: POST a flag for review on the entry
    post:
      tags:
        - Entry
        - Flag
      summary: Flag an entry for review
      description: "Post a flag for review, to be entered into a moderation queue. Must include reason for flagging."
      operationId: flag_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      requestBody:
        description: Flag an entry
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Flag"
            example: { "reason": "Spam" }
      responses:
        "200":
          description: Entry successfully flagged.
          content:
            application/json:
              example: { "message": "Entry successfully flagged." }
        "400":
          description: Bad request.
          content:
            application/json:
              examples:
                noReason:
                  value: { "error": "Flagging an entry needs a reason." }
                badEntryId:
                  value:
                    { "error": "That is not a properly formatted entryId." }
        "404":
          description: Entry not found.
          content:
            application/json:
              example: { "error": "There is no entry with that entryId." }
        default:
          description: Default error sample response
  /entry/{entryId}/bookmark:
    summary: POST or DELETE bookmarks
    post:
      tags:
        - Entry
        - Bookmark
      summary: Bookmark a page
      description: If there is a logged in user, set a bookmark for that user on that entry.
      operationId: bookmark_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Successfully created bookmark.
          content:
            application/json:
              example: { "message": "Entry bookmarked." }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted entryId." }
        "404":
          description: Entry not found
          content:
            application/json:
              example: { "error": "There is no entry with that entryId." }
        "409":
          description: User has already bookmarked that entry.
          content:
            application/json:
              example: { "error": "You have already liked that bookmark." }
        default:
          description: Default error sample response
    delete:
      tags:
        - Entry
        - Bookmark
      summary: Unbookmark a page
      description: If there is a logged in user that has bookmarked the given entry, remove the bookmark.
      operationId: unbookmark_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Successfully deleted bookmark.
          content:
            application/json:
              example: { message: "Bookmark successfully deleted." }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted entryId." }
        "404":
          description: Entry not found
          content:
            application/json:
              examples:
                notBookmarked:
                  value: { "error": "You don't have that entry bookmarked." }

                missingKeyword:
                  value: { "error": "There is no entry with that entryId." }
        default:
          description: Default error sample response
  /entry/{entryId}/keyword:
    summary: Add one or more keywords to an entry
    put:
      tags:
        - Entry
        - Keyword
      summary: Apply new keywords to an entry
      description: "Adds one or more keywords to an existing entry. Only the post's author can use this route."
      operationId: put_new_keywords
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      requestBody:
        description: "Array of keywords to add to an entry"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Keywords"
            example: ["drama", "sad"]
      responses:
        "200":
          description: "Successfully added all keywords"
          content:
            application/json:
              example: { "message": "Keywords successfully added." }
        "400":
          description: "Bad request"
          content:
            application/json:
              examples:
                badEntryId:
                  value:
                    { "error": "That is not a properly formatted entryId." }
                badKeywords:
                  value:
                    { "error": "Request body must be an array of strings." }
        "404":
          description: "Entry not found"
          content:
            application/json:
              example: { "error": "There is no entry with that entryId." }
        default:
          description: Default error sample response
  /entry/{entryId}/keyword/{keywordValue}:
    summary: Delete a keyword from an entry
    delete:
      tags:
        - Entry
        - Keyword
      summary: Delete keywords from an entry.
      description: "Delete one or more keywords from an entry. Only the entry's author can use this route."
      operationId: delete_keyword
      parameters:
        - name: entryId
          in: path
          description: The ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
        - name: keywordValue
          in: path
          description: The keyword to delete
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Successfully deleted the keyword"
          content:
            application/json:
              example: { "message": "Keyword successfully deleted." }
        "400":
          description: "Bad request"
          content:
            application/json:
              examples:
                badEntryId:
                  value:
                    { "error": "That is not a properly formatted entryId." }
                badKeyword:
                  value: { "error": "That is not a valid keyword." }
        "404":
          description: "Entity not found"
          content:
            application/json:
              examples:
                missingEntry:
                  value: { "error": "There is no entry with that entryId." }
                missingKeyword:
                  value: { "error": "Keyword not found in entry." }
        default:
          description: Default error sample response
  /message:
    summary: Post messages to the site admins
    post:
      tags:
        - Message
      summary: POST messages to the site admins
      description: "POST a message to the site admins."
      operationId: post_message
      requestBody:
        description:
          The body JSON must include messageText, and optionally any or all of name, email, and useLoginInfo. If useLoginInfo is set to true,
          and the submitter of the form is a logged in user, the name and email of the message are set to the user's userName and email, and
          the message is marked as verified when it is added to the database. If useLoginInfo is not set, but the name and email match the
          userName and email of a logged in user, then the email is marked as verified. If useLoginInfo is set to true and the submitter is
          not logged in, they are redirected to /login. If useLoginInfo is set to false, or not included, and either there is no logged in
          user, or the name or email provided do not match the username and email of the logged in user, then name and email will be used to
          set their respective submitted values (if present), and the message will not be marked as verified.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
            examples:
              nameAndEmail:
                value:
                  {
                    "name": "Freddy",
                    "email": "Freddy@example.com",
                    "messageText": "This is an unverified message to the admins.",
                  }
              anonymous:
                value: { "messageText": "Eye think ewe knead a spell checker." }
              loggedIn:
                value:
                  {
                    "useLoginInfo": true,
                    "messageText": "This is a verified message to the admins.",
                  }
      responses:
        "200":
          description: "Successfully created message"
          content:
            application/json:
              example: { "message": "Message sent." }
        "400":
          description: "Bad request."
          content:
            application/json:
              example: { "error": "Message text is missing." }
        default:
          description: Default error sample response
  /admin/message:
    summary: Admin route to read messages POSTed to /message
    get:
      tags:
        - Message
        - Admin
      summary: GET messages
      description: "If there is a logged in user that is an admin, return a list of messages. Otherwise, redirect to /login"
      operationId: get_message
      parameters:
        - in: query
          name: unread
          schema:
            type: boolean
          description: "If unread is set to true, the GET will only return messages that have read set to false, otherwise it will return all messages."
      responses:
        "200":
          description: "list of messages found"
          content:
            application/json:
              example:
                [
                  {
                    "_id": "669fdd90d88a3ce68dde514f",
                    "name": "Anonymous",
                    "email": "Anonymous@example.com",
                    "messageText": "This should NOT be a verified message",
                    "verified": false,
                    "read": false,
                    "createDate": "2024-07-23T19:30:14.089Z",
                    "__v": 0,
                  },
                  {
                    "_id": "66a00443827cfd41d2557be0",
                    "name": "Anonymous",
                    "email": "Anonymous@example.com",
                    "messageText": "This should NOT be a verified message",
                    "verified": false,
                    "read": false,
                    "createDate": "2024-07-23T19:30:14.089Z",
                    "__v": 0,
                  },
                  {
                    "_id": "66a006ee5e9ad8a79398ae45",
                    "name": "Freddy",
                    "email": "Freddy@example.com",
                    "messageText": "This should be a verified message, and have a createDate.",
                    "verified": true,
                    "read": true,
                    "createDate": "2024-07-23T19:39:26.146Z",
                    "__v": 0,
                  },
                ]
        default:
          description: Default error sample response
  /admin/message/{messageId}:
    summary: Admin route to work with individual messages POSTed to /message
    put:
      tags:
        - Message
        - Admin
      summary: Mark a particular message as read or unread
      description: If there is a logged in user that is an admin, allow them to mark the message as read or unread.
      operationId: mark_message_read
      parameters:
        - name: messageId
          in: path
          description: the ID of the message
          required: true
          style: simple
          explode: false
          schema: {}
      requestBody:
        description: Submit a request to mark the message as read or unread
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMessage"
            example: { "read": true }
      responses:
        "200":
          description: Successfully updated messages.
          content:
            application/json:
              example:
                {
                  "_id": "669fdb11d88a3ce68dde514c",
                  "name": "Freddy",
                  "email": "Freddy@example.com",
                  "messageText": "This should be a verified message",
                  "verified": true,
                  "read": true,
                  "__v": 0,
                  "createDate": "2024-07-24T19:21:26.156Z",
                }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "Invalid request." }
        "404":
          description: MessageId not found."
          content:
            application/json:
              example: { "error": "There is no message with that messageId." }
    delete:
      tags:
        - Message
        - Admin
      summary: Delete a message
      description: If there is a logged in user that is an admin, allow them to delete the message.
      operationId: delete_message
      parameters:
        - name: messageId
          in: path
          description: the ID of the message
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "204":
          description: Successfully deleted message.
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "Invalid request." }
        "404":
          description: MessageId not found."
          content:
            application/json:
              example: { "error": "There is no message with that messageId." }
        default:
          description: Default error sample response
  /admin/flag:
    summary: Return a list of flags
    get:
      tags:
        - Flag
        - Admin
      summary: Get a list of flags
      description: "Get a list of flags"
      operationId: get_flags
      responses:
        "200":
          description: Flags successfully returned.
          content:
            application/json:
              example:
                [
                  {
                    "_id": "66ad3d1c263beda349fb2a41",
                    "user":
                      {
                        "_id": "667b294248b8805d71a96a03",
                        "userName": "apmanager",
                        "email": "rfoley00@live.com",
                        "admin": true,
                        "bio": "I haven't decided what to put in my bio yet.",
                        "darkMode": true,
                        "moderator": false,
                        "publishEmail": true,
                        "locked": false,
                        "id": "667b294248b8805d71a96a03",
                      },
                    "entry":
                      {
                        "keywords": [],
                        "_id": "6688142fb004b799a5a29d03",
                        "authorName": "Freddy",
                        "entryTitle": null,
                        "storyTitle": "Random Title",
                        "bodyText": "Genji no monogatari",
                        "previousEntry": null,
                        "createDate": "2024-07-05T15:41:35.510Z",
                        "storyId": "6688142fb004b799a5a29d03",
                        "__v": 0,
                        "id": "6688142fb004b799a5a29d03",
                      },
                    "reason": "spam",
                    "createDate": "2024-08-02T20:10:04.480Z",
                    "__v": 0,
                  },
                  {
                    "_id": "66bcc1308c632c903d8e5f98",
                    "user":
                      {
                        "_id": "667b294248b8805d71a96a03",
                        "userName": "apmanager",
                        "email": "rfoley00@live.com",
                        "admin": true,
                        "bio": "I haven't decided what to put in my bio yet.",
                        "darkMode": true,
                        "moderator": false,
                        "publishEmail": true,
                        "locked": false,
                        "id": "667b294248b8805d71a96a03",
                      },
                    "entry":
                      {
                        "keywords": [],
                        "_id": "66a7fd2095206fecbb52c189",
                        "authorName": "Freddy",
                        "entryTitle": "Lerrald and Vred sought the Cartesian Bear",
                        "bodyText": "Lerrald and Vred set forth to find the greatest mapmaker in all the land, the Cartesian Bear. This meant that they were going south, because the Cartesian Bear was well known to dislike Polar Bears, and stay as far away from them as possible.\n\n\"So,\" spake Vred, as they travelled, \"do you think the whole story is going to be full of referential humor and obscure math jokes like this?\"\n\n\"Indeed,\" replied Lerrald, \"for the author art a nerd of the greatest magnitude. Also, the breaking of the fourth wall shalt most likely continue unabated.\"\n\nWhereupon Vred stopped walking for a moment, frowned, exclaimed \"Dang it!\" and hurried to catch up with Lerrald.",
                        "previousEntry": "6695b2573550c66db1ab9106",
                        "createDate": "2024-07-29T20:35:44.858Z",
                        "storyId": "6695b2573550c66db1ab9106",
                        "storyTitle": "In the beginning...",
                        "__v": 0,
                        "id": "66a7fd2095206fecbb52c189",
                      },
                    "reason": "spam",
                    "createDate": "2024-08-14T14:37:37.001Z",
                    "__v": 0,
                  },
                ]
  /admin/flag/{flagId}:
    summary: Delete a flag
    delete:
      tags:
        - Admin
        - Flag
      summary: Delete a flag
      description: "Delete a flag."
      operationId: delete_flag
      parameters:
        - name: flagId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Successfully deleted flag.
          content:
            application/json:
              example: { "message": "Flag successfully deleted." }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted flagId." }
        "404":
          description: Flag not found.
          content:
            application/json:
              example: { "error": "There is no flag with that flagId." }
        default:
          description: Default error sample response
  /admin/entry/{entryId}:
    summary: Delete an entry
    delete:
      tags:
        - Admin
        - Entry
      summary: Delete an entry
      description: "Delete an entry."
      operationId: delete_entry
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Successfully deleted entry.
          content:
            application/json:
              example: { "message": "Entry successfully deleted." }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted entryId." }
        "404":
          description: Entry not found.
          content:
            application/json:
              example: { "error": "There is no entry with that entryId." }
        default:
          description: Default error sample response
  /admin/entry/{entryId}/keyword:
    summary: Add one or more keywords to an entry
    put:
      tags:
        - Entry
        - Keyword
        - Admin
      summary: Apply new keywords to an entry
      description: "Adds one or more keywords to an existing entry. Only admins can use this route."
      operationId: admin_put_new_keywords
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      requestBody:
        description: "An array of the keywords to add."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Keywords"
            example: ["drama", "sad"]
      responses:
        "200":
          description: "Successfully added all keywords"
          content:
            application/json:
              example: { "message": "Keywords successfully added." }
        "400":
          description: "Bad request"
          content:
            application/json:
              examples:
                badEntryId:
                  value:
                    { "error": "That is not a properly formatted entryId." }
                badKeywords:
                  value:
                    { "error": "Request body must be an array of strings." }
        "404":
          description: "Entry not found"
          content:
            application/json:
              example: { "error": "There is no entry with that entryId." }
        default:
          description: Default error sample response
  /admin/entry/{entryId}/keyword/{keywordValue}:
    summary: Delete a keyword from an entry
    delete:
      tags:
        - Entry
        - Keyword
        - Admin
      summary: Delete keywords from an entry.
      description: "Delete one or more keywords from an entry. Only admins can use this route."
      operationId: admin_delete_keyword
      parameters:
        - name: entryId
          in: path
          description: The ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
        - name: keywordValue
          in: path
          description: The keyword to delete from the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Successfully deleted the keyword"
          content:
            application/json:
              example: { "message": "Keyword successfully deleted." }
        "400":
          description: "Bad request"
          content:
            application/json:
              examples:
                badEntryId:
                  value:
                    { "error": "That is not a properly formatted entryId." }
                badKeywords:
                  value: { "error": "That is not a valid keyword." }
        "404":
          description: "Entity not found"
          content:
            application/json:
              examples:
                missingEntry:
                  value: { "error": "There is no entry with that entryId." }
                missingKeyword:
                  value: { "error": "Keyword not found in entry." }
        default:
          description: Default error sample response
  /admin/user/{userId}/lock:
    summary: Lock a user
    post:
      tags:
        - Admin
        - User
      summary: Lock a user
      description: Lock a user
      operationId: lock_user
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Successfully locked user.
          content:
            application/json:
              example: { "message": "User successfully locked." }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted userId." }
        "404":
          description: Entry not found.
          content:
            application/json:
              example: { "error": "There is no user with that userId." }
        "409":
          description: User already locked."
          content:
            application/json:
              example: { "error": "That user is already locked." }
        default:
          description: Default error sample response
    delete:
      tags:
        - Admin
        - User
      summary: Unlock a user
      description: Unlock a user
      operationId: unlock_user
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Successfully unlocked user.
          content:
            application/json:
              example: { "message": "User successfully unlocked." }
        "400":
          description: Bad request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted userId." }
        "404":
          description: Entry not found.
          content:
            application/json:
              example: { "error": "There is no user with that userId." }
        "409":
          description: User not locked."
          content:
            application/json:
              example: { "error": "That user is not locked." }
        default:
          description: Default error sample response
  /admin/user/{userId}:
    summary: Examine or alter a user's information
    get:
      tags:
        - Admin
        - User
      summary: Examine a user's information
      description: "Return the document from the users collection with the given userId"
      operationId: examine_user
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Successfully retrieved user document."
          content:
            application/json:
              example:
                {
                  "_id": "668ee23ce1dcd980cf0739f9",
                  "userName": "FreddyQuaoar",
                  "email": "FreddyQuaoar@example.com",
                  "admin": false,
                  "moderator": false,
                  "bio": "I haven't decided what to put in my bio yet.",
                  "publishEmail": false,
                  "darkMode": false,
                  "__v": 0,
                  "locked": false,
                  "publishedEntries": [],
                  "followedAuthors": [],
                  "likedEntries": [],
                  "bookmarkedEntries": [],
                  "id": "668ee23ce1dcd980cf0739f9",
                }
        "400":
          description: Invalid request.
          content:
            application/json:
              example: { "error": "That is not a properly formatted userId." }
        "404":
          description: User not found.
          content:
            application/json:
              example: { "error": "There is no user with that userId." }
        default:
          description: Default error sample response
    put:
      tags:
        - Admin
        - User
      summary: Alter a user
      description:
        "Submit a JSON object containing one or more of the follwing fields with values of the apropriate type:\
        \ admin: <boolean>, moderator: <boolean>, bio: <string>, publishEmail: <boolean>. The user's database entry will have\
        \ it's corresponding entry set to the given value."
      operationId: alter_user
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      requestBody:
        description: "Fields in the user's database document to change, and the values they should be changed to"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlterUser"
            example:
              {
                "admin": true,
                "moderator": true,
                "bio": "I am a doofus who put naughty words in my bio.",
                "publishEmail": false,
              }
      responses:
        "200":
          description: "Successfully changed user settings."
          content:
            application/json:
              example:
                {
                  "_id": "668ee23ce1dcd980cf0739f9",
                  "userName": "FreddyQuaoar",
                  "email": "FreddyQuaoar@example.com",
                  "admin": false,
                  "moderator": false,
                  "bio": "I haven't decided what to put in my bio yet.",
                  "publishEmail": false,
                  "darkMode": false,
                  "__v": 0,
                  "locked": false,
                  "publishedEntries": [],
                  "followedAuthors": [],
                  "likedEntries": [],
                  "bookmarkedEntries": [],
                  "id": "668ee23ce1dcd980cf0739f9",
                }
        "400":
          description: Invalid request.
          content:
            application/json:
              examples:
                invalidRequest:
                  value: { "error": "Invalid request." }
                misformedUserId:
                  value: { "error": "That is not a properly formatted userId." }
        "404":
          description: User not found.
          content:
            application/json:
              example: { "error": "There is no user with that userId." }
        default:
          description: Default error sample response
  /chain/{entryId}:
    summary: GET the entry chain ending at the specified entry
    get:
      tags:
        - Chain
      summary: Get the entry chain ending at the specified entry.
      description:
        "Returns an array of entries with the last one being the entry with the given entryId, and every other entry in the array having the\
        \ entryId equal to previousEntry of the next array entry, and the first array entry being the beginning of the story."
      operationId: get_chain
      parameters:
        - name: entryId
          in: path
          description: the ID of the entry
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: "Chain successfully returned."
          content:
            application/json:
              examples:
                fullChain:
                  value:
                    [
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "6688142fb004b799a5a29d03",
                        "authorName": "Freddy",
                        "authorId": "668490250029a28118a8d1be",
                        "entryTitle": null,
                        "storyTitle": "Random Title",
                        "bodyText": "Genji no monogatari",
                        "previousEntry": null,
                        "createDate": "2024-07-05T15:41:35.510Z",
                        "keywords": [],
                        "likes": 0,
                        "likedByUser": false,
                        "bookmarkedByUser": false,
                        "continuationEntries":
                          [
                            {
                              "storyId": "6688142fb004b799a5a29d03",
                              "entryId": "668820191cb99dfdc244c23c",
                              "storyTitle": "Random Title",
                              "entryTitle": "Chapter the first",
                              "authorName": "Freddy",
                              "previousEntry": "6688142fb004b799a5a29d03",
                              "keywords": [],
                            },
                            {
                              "storyId": "6688142fb004b799a5a29d03",
                              "entryId": "668c4771e0989ccd9cd6ec8a",
                              "storyTitle": "Random Title",
                              "entryTitle": "adding to this entries list of sub entries",
                              "authorName": "apmanager",
                              "previousEntry": "6688142fb004b799a5a29d03",
                              "keywords": [],
                            },
                          ],
                      },
                      {
                        "storyId": "6688142fb004b799a5a29d03",
                        "entryId": "668d51e61be56166aaaa6cc2",
                        "authorName": "Freddy",
                        "authorId": "668490250029a28118a8d1be",
                        "entryTitle": "Suddenly, a wild accountant appears!",
                        "storyTitle": "Random Title",
                        "bodyText": "It throws a bundle of tax forms at our hero, Bob, stunning him! The existential dread is almost enough to keep him from dodging the subsequent thrown calculator, but he manages to roll out of the way in time, and retaliate with a well-swung Swingline stapler!",
                        "previousEntry": "6688142fb004b799a5a29d03",
                        "createDate": "2024-07-09T15:06:14.267Z",
                        "keywords": [],
                        "likes": 0,
                        "likedByUser": false,
                        "bookmarkedByUser": false,
                        "continuationEntries": [],
                      },
                    ]
                brokenChain:
                  value:
                    [
                      {
                        "storyId": "66bd0377fd83fe5734584642",
                        "entryId": "66bd0378fd83fe5734584651",
                        "authorName": "testkurmdlqazsvnepyhs0.7645244396758495",
                        "authorId": "66bd0374fd83fe5734584612",
                        "entryTitle": "testkurmdlqazsvnepyhs1",
                        "storyTitle": "testkurmdlqazsvnepyhs",
                        "bodyText": "testkurmdlqazsvnepyhs2",
                        "previousEntry": "66bd0377fd83fe5734584642",
                        "createDate": "2024-08-14T19:20:24.445Z",
                        "keywords": [],
                        "likes": 0,
                        "continuationEntries":
                          [
                            {
                              "storyId": "66bd0377fd83fe5734584642",
                              "entryId": "66bd0379fd83fe5734584660",
                              "storyTitle": "testkurmdlqazsvnepyhs",
                              "entryTitle": "testkurmdlqazsvnepyhs1",
                              "authorName": "testkurmdlqazsvnepyhs0.7645244396758495",
                              "previousEntry": "66bd0378fd83fe5734584651",
                            },
                          ],
                      },
                      {
                        "storyId": "66bd0377fd83fe5734584642",
                        "entryId": "66bd0379fd83fe5734584660",
                        "authorName": "testkurmdlqazsvnepyhs0.7645244396758495",
                        "authorId": "66bd0374fd83fe5734584612",
                        "entryTitle": "testkurmdlqazsvnepyhs1",
                        "storyTitle": "testkurmdlqazsvnepyhs",
                        "bodyText": "testkurmdlqazsvnepyhs2",
                        "previousEntry": "66bd0378fd83fe5734584651",
                        "createDate": "2024-08-14T19:20:25.135Z",
                        "keywords": [],
                        "likes": 0,
                        "continuationEntries": [],
                      },
                    ]
        "400":
          description: "malformed request."
          content:
            application/json:
              example: { "error": "That is not a properly formatted entryId." }
        "404":
          description: "entryId does not exist."
          content:
            application/json:
              example: { "error": "There is no entry with that entryId." }
        default:
          description: Default error sample response
  /stats:
    summary: Get some basic site statistics
    get:
      tags:
        - Statistics
      summary: Get some basic site statistics
      description: Get the number of users, stories, and entries currently on the site.
      operationId: get_stats
      responses:
        "200":
          description: Successfully got site statistics.
          content:
            application/json:
              example: { "users": 36, "stories": 9, "entries": 17 }
        default:
          description: Default error sample response
  /keywords:
    summary: GET a list of keywords in use and their counts.
    get:
      parameters:
        - in: query
          name: regex
          schema:
            type: string
          description: "An optional regular expression, only matching keywords will be returned"
      tags:
        - Keyword
        - Search
      summary: Get a list of defined keywords
      description: "Get a list of all used keywords, sorted by number of occurences. If a query string is used, return only matching keywords."
      operationId: get_keyword_list
      responses:
        "200":
          description: "Successfully found a list of keywords."
          content:
            application/json:
              examples:
                registered:
                  value:
                    [
                      { "keyword": "keywords", "count": 2 },
                      { "keyword": "testing", "count": 2 },
                      { "keyword": "lock", "count": 2 },
                      { "keyword": "sad", "count": 1 },
                      { "keyword": "drama", "count": 1 },
                    ]
        "404":
          description: "No matching keywords found."
          content:
            application/json:
              examples:
                registered:
                  value: { "error": "No matching keywords found." }
        default:
          description: Default error sample response
components:
  schemas:
    Register:
      required:
        - userName
        - email
        - password
      properties:
        userName:
          type: string
        email:
          type: string
        password:
          type: string
    Login:
      required:
        - name
        - password
      properties:
        name:
          type: string
        password:
          type: string
    Settings:
      properties:
        bio:
          type: string
        publishEmail:
          type: boolean
        darkMode:
          type: boolean
    AlterUser:
      properties:
        bio:
          type: string
        publishEmail:
          type: boolean
        admin:
          type: boolean
        moderator:
          type: boolean
    NewStory:
      required:
        - storyTitle
        - bodyText
      properties:
        storyTitle:
          type: string
        bodyText:
          type: string
        keywords:
          type: array
          items:
            type: string
    ContinueStory:
      required:
        - entryTitle
        - bodyText
      properties:
        entryTitle:
          type: string
        bodyText:
          type: string
        keywords:
          type: array
          items:
            type: string
    Message:
      required:
        - messageText
      properties:
        messageText:
          type: string
        name:
          type: string
        email:
          type: string
        useLoginInfo:
          type: boolean
    UpdateMessage:
      properties:
        read:
          type: boolean
    Flag:
      required:
        - reason
      properties:
        reason:
          type: string
    Keywords:
      type: array
      items:
        type: string
